= Browser Games =

http://benlynn.blogspot.com/2014/07/15-shades-of-grey_29.html[Inspired by a
talk by John Carmack]
[http://benlynn.blogspot.com/2014/08/let-code.html[follow-up post]], I wrote
these browser games in Haskell. I used the http://haste-lang.org/[Haste
compiler] to solve https://wiki.haskell.org/The_JavaScript_Problem[the
JavaScript problem].

I chose Haste because https://github.com/ghcjs/ghcjs[GHCJS] seemed tough to
install at the time.

I could mostly pretend it was Haskell as usual, though some differences
arose.

== Random Numbers ==

We must make do without System.Random. Haste provides `randomR`, which is
similar to `System.Random.randomR`, but it takes a `Seed` instead of a
`RandomGen`. For example:

------------------------------------------------------------------------------
import Data.List
import Haste

main = newSeed >>=
  writeLog . show . take 20 . unfoldr (Just . randomR (1, 6 :: Int))
------------------------------------------------------------------------------

As of 0.5.5, the docs lie: randomR range is inclusive on both ends.

== Threads ==

https://developer.mozilla.org/en/docs/Web/JavaScript/EventLoop[JavaScript is
single-threaded], in the sense that a function is run to completion before
another begins. There is a implicit event loop running the show.

Redraws only occur when control is returned to the event loop, which can
require sending timeout events.

When programming with libraries such as SDL, we manage multiple threads,
and redraws are under our control. This might make it challenging for a
browser game and a Linux game to share code, though I've only explored this
briefly. Perhaps writing an event loop to mimic JavaScript is the easiest
solution.

An alternative may be `Haste.Concurrent`, which appears to simulate multiple
threads in JavaScript.

== HTML Canvas ==

Experience with SDL helps somewhat with drawing to a canvas element. For
example, `createRGBSurface` is analagous to `createCanvas`.

On the other hand, instead of pixels with integer coordinates, the canvas
uses points with floating point coordinates.

== UI woes ==

Haste has limited support for HTML events. For an
link:../haskell/enigmalhtml[Enigma machine simulation],
I wanted to intercept
https://developer.mozilla.org/en-US/docs/Web/Events/input[the input event].
The Haste API lacks this event.

I worked around the problem by writing a snippet of JavaScript to fire off a
scroll event on an input event, which Haste does recognize:

------------------------------------------------------------------------------
<script type="text/javascript">
var ev = new Event('scroll');
function genEv() {
  document.getElementById("grundstellung").dispatchEvent(ev);
}
</script>
<textarea oninput="genEv();"></textarea>
------------------------------------------------------------------------------

== Big data ==

I gave up trying to embed a neural network and some test cases in
link:../haskell/brain.html[a handwritten digit recogniition demo].

I tried defining a giant list in Haskell. I tried a routine to fetch and read
a text file. In the end I was forced to write some JavaScript.

== haste-cabal ==

For a long time, I thought I was confined to the packages bundled with Haste.

On the contrary, by running `haste-cabal`, we can use many packages in our
JavaScript programs:

------------------------------------------------------------------------------
$ haste-cabal install parsec
------------------------------------------------------------------------------
